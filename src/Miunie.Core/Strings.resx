<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CANNOT_SELF_REP" xml:space="preserve">
    <value>Sorry {0}, you cannot influence your own reputation! Try influencing other people instead. :smirk:{{OR}}
Aww, {0}... I can't do that. If you need your reputation to change, try blackmailing others to do it for you.{{OR}}
Hey {0}, did you really think you could influence yourself? Get some friends to do that for you.{{OR}}
Did {0} just try to influence someone that isn't me?! Wait, they tried to self-rep? Hah!</value>
    <comment>Invoker Username</comment>
  </data>
  <data name="GUILD_EMBED_CREATED_AT_TITLE" xml:space="preserve">
    <value>:calendar: Creation date</value>
    <comment>No formatting options.</comment>
  </data>
  <data name="GUILD_EMBED_NAME_TITLE" xml:space="preserve">
    <value>Name</value>
    <comment>No formatting options.</comment>
  </data>
  <data name="GUILD_EMBED_ROLES_TITLE" xml:space="preserve">
    <value>Roles</value>
    <comment>No formatting options.</comment>
  </data>
  <data name="GUILD_EMBED_STATS_TITLE" xml:space="preserve">
    <value>Server stats</value>
    <comment>No formatting options.</comment>
  </data>
  <data name="GUILD_EMBED_TITLE" xml:space="preserve">
    <value>**ABOUT THIS SERVER**</value>
    <comment>No formatting options.</comment>
  </data>
  <data name="REPUTATION_GIVEN" xml:space="preserve">
    <value>**{0}** just got reputation from {1}! :trophy:{{OR}}
**{0}** just got reputation from {1}! :fireworks:{{OR}}
**{0}** just got reputation from {1}! :tada:{{OR}}
**{0}** was given some reputation by {1}! What's in it for me, though? :thinking:</value>
    <comment>Target Username, Invoker Username</comment>
  </data>
  <data name="REPUTATION_TAKEN" xml:space="preserve">
    <value>**{0}** just had reputation removed from {1} :({{OR}}
**{0}** just had reputation removed from {1} :'({{OR}}
**{0}** just had reputation removed from {1} :sob:</value>
    <comment>Target Username, Invoker Username</comment>
  </data>
  <data name="SHOW_REMOTE_REPO" xml:space="preserve">
    <value>You can find my source code on GitHub:
https://github.com/discord-bot-tutorial/Miunie</value>
    <comment>No formatting options.</comment>
  </data>
  <data name="USER_EMBED_CREATED_AT_TITLE" xml:space="preserve">
    <value>:calendar_spiral: Creation date</value>
  </data>
  <data name="USER_EMBED_IS_BOT" xml:space="preserve">
    <value>_A software person._{{OR}}
_A bot._ :robot:{{OR}}
_Soon to be our AI overlord._</value>
    <comment>No formatting options.</comment>
  </data>
  <data name="USER_EMBED_IS_HUMAN" xml:space="preserve">
    <value>_Passes ReCaptcha,
so I guess they're real._{{OR}}
_A real human being._{{OR}}
_Real flesh, bones,
blood, all that._</value>
    <comment>No formatting options.</comment>
  </data>
  <data name="USER_EMBED_JOINED_AT_TITLE" xml:space="preserve">
    <value>:calendar: Joined</value>
    <comment>No formatting options.</comment>
  </data>
  <data name="USER_EMBED_NAME_TITLE" xml:space="preserve">
    <value>:label: Name</value>
    <comment>No formatting options.</comment>
  </data>
  <data name="USER_EMBED_REALNESS_TITLE" xml:space="preserve">
    <value>:electric_plug: Bot or not{{OR}}
:electric_plug: Human/Bot</value>
    <comment>No formatting options.</comment>
  </data>
  <data name="USER_EMBED_REP_TITLE" xml:space="preserve">
    <value>:fleur_de_lis: Reputation</value>
    <comment>No formatting options.</comment>
  </data>
  <data name="USER_EMBED_ROLES_TITLE" xml:space="preserve">
    <value>:dolls: Roles</value>
    <comment>No formatting options.</comment>
  </data>
  <data name="USER_EMBED_TITLE" xml:space="preserve">
    <value>**YOUR AWESOME PROFILE**{{OR}}
**YOUR COOL PROFILE**{{OR}}
**YOUR MAGNIFICENT PROFILE**{{OR}}
**YOUR DANK PROFILE**</value>
    <comment>No formatting options.</comment>
  </data>
  <data name="YES_NO_MAYBE" xml:space="preserve">
    <value>Sure{{OR}}
I don't know...{{OR}}
Nah</value>
  </data>
</root>